{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyP2KeQUyRkgluU4frfY7pE/"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OJsf1KGZ3c1K","executionInfo":{"status":"ok","timestamp":1744812093005,"user_tz":-330,"elapsed":196,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"489e05fb-3081-4342-8e8d-378733309a2a"},"outputs":[{"output_type":"stream","name":"stdout","text":["   Survived  Pclass   Age  SibSp  Parch     Fare  Sex_1  Embarked_1  \\\n","0         0       3  22.0      1      0   7.2500  False       False   \n","1         1       1  38.0      1      0  71.2833   True        True   \n","2         1       3  26.0      0      0   7.9250   True       False   \n","3         1       1  35.0      1      0  53.1000   True       False   \n","4         0       3  35.0      0      0   8.0500  False       False   \n","\n","   Embarked_2  Title_1  Title_2  Title_3  Title_4  \n","0       False    False    False    False    False  \n","1       False    False     True    False    False  \n","2       False     True    False    False    False  \n","3       False    False     True    False    False  \n","4       False    False    False    False    False  \n"]}],"source":["import pandas as pd\n","\n","# Load the raw data again\n","url = \"https://raw.githubusercontent.com/Subhashbgowda/Datasets/main/titanic_cleaned.csv\"\n","df = pd.read_csv(url)\n","\n","# One-hot encode the categorical columns 'Sex', 'Embarked', and 'Title'\n","df = pd.get_dummies(df, columns=[\"Sex\", \"Embarked\", \"Title\"], drop_first=True)\n","\n","# Show the first few rows to confirm\n","print(df.head())\n"]},{"cell_type":"code","source":["import pandas as pd\n","\n","# Load the raw data again\n","url = \"https://raw.githubusercontent.com/Subhashbgowda/Datasets/main/titanic_cleaned.csv\"\n","df = pd.read_csv(url)\n","\n","# One-hot encode the categorical columns 'Sex', 'Embarked', and 'Title'\n","df = pd.get_dummies(df, columns=[\"Sex\", \"Embarked\", \"Title\"], drop_first=True)\n","\n","# Show the first few rows to confirm\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"s8eMzupZ4nMH","executionInfo":{"status":"ok","timestamp":1744812167923,"user_tz":-330,"elapsed":43,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"27d4d7e7-f297-4339-9ea8-682d352eeb51"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["   Survived  Pclass  Age  SibSp  Parch  Fare  Sex_1  Embarked_1  Embarked_2  \\\n","0         0       3   22      1      0     7      0           0           0   \n","1         1       1   38      1      0    71      1           1           0   \n","2         1       3   26      0      0     7      1           0           0   \n","3         1       1   35      1      0    53      1           0           0   \n","4         0       3   35      0      0     8      0           0           0   \n","\n","   Title_1  Title_2  Title_3  Title_4  \n","0        0        0        0        0  \n","1        0        1        0        0  \n","2        1        0        0        0  \n","3        0        1        0        0  \n","4        0        0        0        0  \n"]}]},{"cell_type":"code","source":["print(df.dtypes)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pkHbWi2l6NGs","executionInfo":{"status":"ok","timestamp":1744812235873,"user_tz":-330,"elapsed":20,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"4affa6eb-7ebf-4052-aad0-475d89541e8a"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Survived      int64\n","Pclass        int64\n","Age           int64\n","SibSp         int64\n","Parch         int64\n","Fare          int64\n","Sex_1         int64\n","Embarked_1    int64\n","Embarked_2    int64\n","Title_1       int64\n","Title_2       int64\n","Title_3       int64\n","Title_4       int64\n","dtype: object\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","# Select the columns to scale (Age and Fare)\n","features_to_scale = ['Age', 'Fare']\n","\n","# Initialize the scaler\n","scaler = StandardScaler()\n","\n","# Apply scaling on selected columns\n","df[features_to_scale] = scaler.fit_transform(df[features_to_scale])\n","\n","# Show the first few rows to confirm scaling\n","print(df.head())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"On703H3z6dsB","executionInfo":{"status":"ok","timestamp":1744812632782,"user_tz":-330,"elapsed":10,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"9e3c27f6-a623-4add-a574-fd18adfe1216"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["   Survived  Pclass       Age  SibSp  Parch      Fare  Sex_1  Embarked_1  \\\n","0         0       3 -0.564145      1      0 -0.498948      0           0   \n","1         1       1  0.664649      1      0  0.789405      1           1   \n","2         1       3 -0.256947      0      0 -0.498948      1           0   \n","3         1       1  0.434250      1      0  0.427056      1           0   \n","4         0       3  0.434250      0      0 -0.478817      0           0   \n","\n","   Embarked_2  Title_1  Title_2  Title_3  Title_4  \n","0           0        0        0        0        0  \n","1           0        0        1        0        0  \n","2           0        1        0        0        0  \n","3           0        0        1        0        0  \n","4           0        0        0        0        0  \n"]}]},{"cell_type":"code","source":["from sklearn.linear_model import LogisticRegression\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, confusion_matrix\n","\n","# Splitting the data into training and testing sets\n","X = df.drop(columns=['Survived'])  # Features\n","y = df['Survived']  # Target\n","\n","# Split the data (80% train, 20% test)\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)\n","\n","# Initialize the Logistic Regression model\n","model = LogisticRegression(max_iter=1000)\n","\n","# Train the model on the training data\n","model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","y_pred = model.predict(X_test)\n","\n","# Evaluate the model\n","accuracy = accuracy_score(y_test, y_pred)\n","conf_matrix = confusion_matrix(y_test, y_pred)\n","\n","print(f\"Test Accuracy: {accuracy}\")\n","print(\"Confusion Matrix:\")\n","print(conf_matrix)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"IjAPprHV7-i1","executionInfo":{"status":"ok","timestamp":1744812723376,"user_tz":-330,"elapsed":50,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"823b6b7a-fcd7-4495-a146-eda266380742"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Test Accuracy: 0.8156424581005587\n","Confusion Matrix:\n","[[89 16]\n"," [17 57]]\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FnWYHz9l8Ut2","executionInfo":{"status":"ok","timestamp":1744813988664,"user_tz":-330,"elapsed":31251,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"05d3dd78-0fef-4ddd-f836-9e521709df47"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"wMyiuD5fBCAd"},"execution_count":null,"outputs":[]}]}