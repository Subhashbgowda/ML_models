{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOOdpA0MbAvyuFIuxOaDbcy"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lbeszPbQ88YE","executionInfo":{"status":"ok","timestamp":1744563021314,"user_tz":-330,"elapsed":55,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"ff90f7da-ed0d-4a3d-d90d-095cf9af0d31"},"outputs":[{"output_type":"stream","name":"stdout","text":["   PassengerId  Survived  Pclass  \\\n","0            1         0       3   \n","1            2         1       1   \n","2            3         1       3   \n","3            4         1       1   \n","4            5         0       3   \n","\n","                                                Name     Sex   Age  SibSp  \\\n","0                            Braund, Mr. Owen Harris    male  22.0      1   \n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n","2                             Heikkinen, Miss. Laina  female  26.0      0   \n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n","4                           Allen, Mr. William Henry    male  35.0      0   \n","\n","   Parch            Ticket     Fare Cabin Embarked  \n","0      0         A/5 21171   7.2500   NaN        S  \n","1      0          PC 17599  71.2833   C85        C  \n","2      0  STON/O2. 3101282   7.9250   NaN        S  \n","3      0            113803  53.1000  C123        S  \n","4      0            373450   8.0500   NaN        S  \n"]}],"source":["import pandas as pd\n","\n","# Load dataset directly from the URL\n","url = \"https://raw.githubusercontent.com/datasciencedojo/datasets/master/titanic.csv\"\n","df = pd.read_csv(url)\n","\n","# View the first 5 rows of the dataset\n","print(df.head())\n"]},{"cell_type":"code","source":["df.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"X_aLCYOFDjwE","executionInfo":{"status":"ok","timestamp":1744563046286,"user_tz":-330,"elapsed":8,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"e25123fe-dca8-43a8-df3c-221d3aa1980e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"]}]},{"cell_type":"code","source":["df.describe()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"id":"tAPhaL0ZFPmb","executionInfo":{"status":"ok","timestamp":1744563420021,"user_tz":-330,"elapsed":52,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"232f117b-606d-40e7-9aae-15917ca1be52"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       PassengerId    Survived      Pclass         Age       SibSp  \\\n","count   891.000000  891.000000  891.000000  714.000000  891.000000   \n","mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n","std     257.353842    0.486592    0.836071   14.526497    1.102743   \n","min       1.000000    0.000000    1.000000    0.420000    0.000000   \n","25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n","50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n","75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n","max     891.000000    1.000000    3.000000   80.000000    8.000000   \n","\n","            Parch        Fare  \n","count  891.000000  891.000000  \n","mean     0.381594   32.204208  \n","std      0.806057   49.693429  \n","min      0.000000    0.000000  \n","25%      0.000000    7.910400  \n","50%      0.000000   14.454200  \n","75%      0.000000   31.000000  \n","max      6.000000  512.329200  "],"text/html":["\n","  <div id=\"df-42aebfdf-b52f-4114-8d0d-031fc531d758\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-42aebfdf-b52f-4114-8d0d-031fc531d758')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-42aebfdf-b52f-4114-8d0d-031fc531d758 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-42aebfdf-b52f-4114-8d0d-031fc531d758');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e1a477b3-d857-4c9b-a3fe-1dd56d12adda\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e1a477b3-d857-4c9b-a3fe-1dd56d12adda')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e1a477b3-d857-4c9b-a3fe-1dd56d12adda button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"PassengerId\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 320.8159711429856,\n        \"min\": 1.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          446.0,\n          668.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Survived\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.8713661874558,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.3838383838383838,\n          1.0,\n          0.4865924542648585\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Pclass\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.2523437079693,\n        \"min\": 0.8360712409770513,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          2.308641975308642,\n          3.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 242.9056731818781,\n        \"min\": 0.42,\n        \"max\": 714.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          29.69911764705882,\n          28.0,\n          714.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"SibSp\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.4908277465442,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          891.0,\n          0.5230078563411896,\n          8.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Parch\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 314.65971717879,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          0.38159371492704824,\n          6.0,\n          0.8060572211299559\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Fare\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 330.6256632228577,\n        \"min\": 0.0,\n        \"max\": 891.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          32.204207968574636,\n          14.4542,\n          891.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["# Total missing values per column\n","print(df.isnull().sum())\n","\n","# Fill missing Age with mean age\n","df['Age'].fillna(df['Age'].mean(), inplace=True)\n","\n","# Drop rows with missing 'Embarked' values\n","df.dropna(subset=['Embarked'], inplace=True)\n","\n","df.isnull().sum()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":827},"id":"c7cNnKVdFrx9","executionInfo":{"status":"ok","timestamp":1744563601175,"user_tz":-330,"elapsed":28,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"78a2e92d-d33f-4970-f0f0-9eade0ad7058"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age              0\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         0\n","dtype: int64\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-11-2a829090429c>:5: FutureWarning: A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.\n","The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.\n","\n","For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.\n","\n","\n","  df['Age'].fillna(df['Age'].mean(), inplace=True)\n"]},{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age              0\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         0\n","dtype: int64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>PassengerId</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Survived</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Name</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Age</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ticket</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Fare</th>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Cabin</th>\n","      <td>687</td>\n","    </tr>\n","    <tr>\n","      <th>Embarked</th>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div><br><label><b>dtype:</b> int64</label>"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["# Select only 'Name', 'Age', 'Sex'\n","df_subset = df[['Name', 'Age', 'Sex']]\n","print(df_subset.head())\n","\n","# Filter passengers older than 60\n","elderly = df[df['Age'] > 60]\n","print(elderly[['Name', 'Age','Sex']])\n","print(elderly.count())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"qgro38TjHkN-","executionInfo":{"status":"ok","timestamp":1744566507985,"user_tz":-330,"elapsed":13,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"4f4300ee-d092-455d-8339-a91db6187346"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                Name   Age     Sex\n","0                            Braund, Mr. Owen Harris  22.0    male\n","1  Cumings, Mrs. John Bradley (Florence Briggs Th...  38.0  female\n","2                             Heikkinen, Miss. Laina  26.0  female\n","3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  35.0  female\n","4                           Allen, Mr. William Henry  35.0    male\n","                                     Name   Age     Sex\n","33                  Wheadon, Mr. Edward H  66.0    male\n","54         Ostby, Mr. Engelhart Cornelius  65.0    male\n","96              Goldschmidt, Mr. George B  71.0    male\n","116                  Connors, Mr. Patrick  70.5    male\n","170             Van der hoef, Mr. Wyckoff  61.0    male\n","252             Stead, Mr. William Thomas  62.0    male\n","275     Andrews, Miss. Kornelia Theodosia  63.0  female\n","280                      Duane, Mr. Frank  65.0    male\n","326             Nysveen, Mr. Johan Hansen  61.0    male\n","438                     Fortune, Mr. Mark  64.0    male\n","456             Millet, Mr. Francis Davis  65.0    male\n","483                Turkula, Mrs. (Hedwig)  63.0  female\n","493               Artagaveytia, Mr. Ramon  71.0    male\n","545          Nicholson, Mr. Arthur Ernest  64.0    male\n","555                    Wright, Mr. George  62.0    male\n","570                    Harris, Mr. George  62.0    male\n","625                 Sutton, Mr. Frederick  61.0    male\n","630  Barkworth, Mr. Algernon Henry Wilson  80.0    male\n","672           Mitchell, Mr. Henry Michael  70.0    male\n","745          Crosby, Capt. Edward Gifford  70.0    male\n","851                   Svensson, Mr. Johan  74.0    male\n","PassengerId    21\n","Survived       21\n","Pclass         21\n","Name           21\n","Sex            21\n","Age            21\n","SibSp          21\n","Parch          21\n","Ticket         21\n","Fare           21\n","Cabin          10\n","Embarked       21\n","dtype: int64\n"]}]},{"cell_type":"code","source":["#average group of passengers by gender\n","print(df.groupby('Sex')['Age'].mean())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vu6g4q2wRkWH","executionInfo":{"status":"ok","timestamp":1744566786535,"user_tz":-330,"elapsed":9,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"7a32c5b2-e5d3-4ef3-dd81-de3189e3cf92"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sex\n","female    28.077094\n","male      30.505824\n","Name: Age, dtype: float64\n"]}]},{"cell_type":"code","source":["#suvival rate group of passengers by gender\n","print(df.groupby('Sex')['Survived'].mean())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Snv4bxowRw4q","executionInfo":{"status":"ok","timestamp":1744566842809,"user_tz":-330,"elapsed":6,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"5e38c2de-1616-4115-adca-8d20ac7beb66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sex\n","female    0.740385\n","male      0.188908\n","Name: Survived, dtype: float64\n"]}]},{"cell_type":"code","source":["#survival group of passengers by class\n","print(df.groupby('Pclass')['Survived'].mean())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UWZRBTgNSXSb","executionInfo":{"status":"ok","timestamp":1744566906938,"user_tz":-330,"elapsed":15,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"70e5b4a0-fc61-478d-d513-54cadf561ac3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pclass\n","1    0.626168\n","2    0.472826\n","3    0.242363\n","Name: Survived, dtype: float64\n"]}]},{"cell_type":"code","source":["# Create a mapping DataFrame for Pclass\n","pclass_labels = pd.DataFrame({\n","    'Pclass': [1, 2, 3],\n","    'Class_Label': ['Luxury', 'Comfort', 'Economy']\n","})\n","\n","# Merge with Titanic data\n","merged_df = pd.merge(df, pclass_labels, on='Pclass', how='left')\n","print(merged_df[['Pclass', 'Class_Label']].drop_duplicates())\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"i1yr4t8uSm8U","executionInfo":{"status":"ok","timestamp":1744567003708,"user_tz":-330,"elapsed":12,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"57ca399d-a370-4d3a-b632-e6d54cbee960"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["   Pclass Class_Label\n","0       3     Economy\n","1       1      Luxury\n","9       2     Comfort\n"]}]},{"cell_type":"code","source":["filtered_df=df[df['Fare']>100][['Name','Age','Pclass']]\n","print(filtered_df)\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0VXE-XQLTj_A","executionInfo":{"status":"ok","timestamp":1744567635869,"user_tz":-330,"elapsed":18,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"249f9c7c-c710-44d3-89af-abe94e4cac44"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["                                                  Name        Age  Pclass\n","27                      Fortune, Mr. Charles Alexander  19.000000       1\n","31      Spencer, Mrs. William Augustus (Marie Eugenie)  29.699118       1\n","88                          Fortune, Miss. Mabel Helen  23.000000       1\n","118                           Baxter, Mr. Quigg Edmond  24.000000       1\n","195                               Lurette, Miss. Elise  58.000000       1\n","215                            Newell, Miss. Madeleine  31.000000       1\n","258                                   Ward, Miss. Anna  35.000000       1\n","268      Graham, Mrs. William Thompson (Edith Junkins)  58.000000       1\n","269                             Bissette, Miss. Amelia  35.000000       1\n","297                       Allison, Miss. Helen Loraine   2.000000       1\n","299    Baxter, Mrs. James (Helene DeLaudeniere Chaput)  50.000000       1\n","305                     Allison, Master. Hudson Trevor   0.920000       1\n","306                            Fleming, Miss. Margaret  29.699118       1\n","307  Penasco y Castellana, Mrs. Victor de Satode (M...  17.000000       1\n","311                         Ryerson, Miss. Emily Borie  18.000000       1\n","318                           Wick, Miss. Mary Natalie  31.000000       1\n","319  Spedden, Mrs. Frederic Oakley (Margaretta Corn...  40.000000       1\n","325                           Young, Miss. Marie Grice  36.000000       1\n","332                          Graham, Mr. George Edward  38.000000       1\n","334  Frauenthal, Mrs. Henry William (Clara Heinshei...  29.699118       1\n","337                    Burns, Miss. Elizabeth Margaret  41.000000       1\n","341                     Fortune, Miss. Alice Elizabeth  24.000000       1\n","373                                Ringhini, Mr. Sante  22.000000       1\n","377                          Widener, Mr. Harry Elkins  27.000000       1\n","380                              Bidois, Miss. Rosalie  42.000000       1\n","390                         Carter, Mr. William Ernest  36.000000       1\n","393                             Newell, Miss. Marjorie  23.000000       1\n","435                          Carter, Miss. Lucile Polk  14.000000       1\n","438                                  Fortune, Mr. Mark  64.000000       1\n","498    Allison, Mrs. Hudson J C (Bessie Waldo Daniels)  25.000000       1\n","505         Penasco y Castellana, Mr. Victor de Satode  18.000000       1\n","527                                 Farthing, Mr. John  29.699118       1\n","537                                LeRoy, Miss. Bertha  30.000000       1\n","544                         Douglas, Mr. Walter Donald  50.000000       1\n","550                        Thayer, Mr. John Borland Jr  17.000000       1\n","557                                Robbins, Mr. Victor  29.699118       1\n","581  Thayer, Mrs. John Borland (Marian Longstreth M...  39.000000       1\n","609                          Shutes, Miss. Elizabeth W  40.000000       1\n","659                         Newell, Mr. Arthur Webster  58.000000       1\n","660                      Frauenthal, Dr. Henry William  50.000000       1\n","679                 Cardeza, Mr. Thomas Drake Martinez  36.000000       1\n","689                  Madill, Miss. Georgette Alexandra  15.000000       1\n","698                           Thayer, Mr. John Borland  49.000000       1\n","700  Astor, Mrs. John Jacob (Madeleine Talmadge Force)  18.000000       1\n","708                               Cleaver, Miss. Alice  22.000000       1\n","716                      Endres, Miss. Caroline Louise  38.000000       1\n","730                      Allen, Miss. Elisabeth Walton  29.000000       1\n","737                             Lesurer, Mr. Gustave J  35.000000       1\n","742              Ryerson, Miss. Susan Parker \"Suzette\"  21.000000       1\n","763          Carter, Mrs. William Ernest (Lucile Polk)  36.000000       1\n","779  Robert, Mrs. Edward Scott (Elisabeth Walton Mc...  43.000000       1\n","802                Carter, Master. William Thornton II  11.000000       1\n","856         Wick, Mrs. George Dennick (Mary Hitchcock)  45.000000       1\n"]}]},{"cell_type":"code","source":["#Group by Embarked and show average fare from each port.\n","print(df.groupby('Embarked')['Fare'].mean().round(2))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YxjAzKcuVvzC","executionInfo":{"status":"ok","timestamp":1744567998280,"user_tz":-330,"elapsed":287,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"7270033a-cf2a-4754-bde8-815bc76f2c66"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Embarked\n","C    59.95\n","Q    13.28\n","S    27.08\n","Name: Fare, dtype: float64\n"]}]},{"cell_type":"code","source":["chilren_survived=df[(df['Age']<10)&(df['Survived']==1)][['Age','Pclass']]\n","print(chilren_survived)\n","print(len(chilren_survived))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8XfXSm9fV0BT","executionInfo":{"status":"ok","timestamp":1744568343275,"user_tz":-330,"elapsed":6,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"328e2d8e-5af1-4d4b-fe87-645f45549d08"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["      Age  Pclass\n","10   4.00       3\n","43   3.00       2\n","58   5.00       2\n","78   0.83       2\n","165  9.00       3\n","172  1.00       3\n","183  1.00       2\n","184  4.00       3\n","193  3.00       2\n","233  5.00       3\n","237  8.00       2\n","261  3.00       3\n","305  0.92       1\n","340  2.00       2\n","348  3.00       3\n","381  1.00       3\n","407  3.00       2\n","445  4.00       1\n","448  5.00       3\n","469  0.75       3\n","479  2.00       3\n","489  9.00       3\n","530  2.00       2\n","535  7.00       2\n","549  8.00       2\n","618  4.00       2\n","644  0.75       3\n","691  4.00       3\n","720  6.00       2\n","750  4.00       2\n","751  6.00       3\n","755  0.67       2\n","777  5.00       3\n","788  1.00       3\n","803  0.42       3\n","827  1.00       2\n","831  0.83       2\n","869  4.00       3\n","38\n"]}]},{"cell_type":"code","source":["#Find out which class (Pclass) had the most survivors.\n","# Filter survivors and group by Pclass, then count survivors in each class\n","survivors_by_class = df[df['Survived'] == 1].groupby('Pclass').size()\n","print(survivors_by_class)\n","\n","# Print the class with the most survivors\n","most_survivors_class = survivors_by_class.idxmax()\n","print(f\"The class with the most survivors is Pclass {most_survivors_class}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pnvCvkeqXe4T","executionInfo":{"status":"ok","timestamp":1744568783018,"user_tz":-330,"elapsed":10,"user":{"displayName":"Subhash _17","userId":"10371011045578673846"}},"outputId":"2ceb3153-17fc-4799-a881-7171ac0b2aaf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Pclass\n","1    134\n","2     87\n","3    119\n","dtype: int64\n","The class with the most survivors is Pclass 1\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')\n"],"metadata":{"id":"nJTGju9QZw9m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"x5NCrnOWCCpb"},"execution_count":null,"outputs":[]}]}